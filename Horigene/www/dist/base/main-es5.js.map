{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Search/Services/http.service.ts","webpack:///src/app/Search/Services/search.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","HttpService","http","url","options","get","map","response","error","body","headers","post","put","param","httpOptions","patch","SearchService","httpService","baseUrl","terms","debounceTime","distinctUntilChanged","switchMap","term","searchQuery","SearchTerms","request","routes","path","loadChildren","m","SearchModule","AppRoutingModule","forRoot","imports","AppComponent","ref","title","isLoading","subscription","detectChanges","unsubscribe","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","environment","production","API_URL","bootstrapModule","err","console"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACXA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,+D,CAGA;AAEA;;AAIA;;;;;;;;QAOaC,W;AACX;;;;;;AAMA,2BAAoBC,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAAqB;AAEzC;;;;;;;;;;;;;eASA,aAAOC,GAAP,EAAoC;AAAA,cAAhBC,OAAgB,uEAAF,EAAE;AAClC,iBAAO,KAAKF,IAAL,CAAUG,GAAV,CAAiBF,GAAjB,EAAsBC,OAAtB,EACJE,GADI,CACA,UAACC,QAAD,EAAc;AACjB,mBAAOA,QAAP;AACD,WAHI,WAIE,UAACC,KAAD,EAAW;AAChB,mBAAO,oEAAiBA,KAAjB,CAAP;AACD,WANI,CAAP;AAOD;AAED;;;;;;;;;;;;;eAUA,cAAQL,GAAR,EAAyD;AAAA,cAApCM,IAAoC,uEAArB,IAAqB;AAAA,cAAfL,OAAe;;AACvD,cAAIA,OAAO,IAAG,IAAd,EAAmB;AACjBA,mBAAO,GAAG;AACVM,qBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACvB,gCAAiB;AADM,eAAhB;AADC,aAAV;AAKH,WANC,MAOE;AACFN,mBAAO,GAAEA,OAAT;AACD;;AACC,iBAAO,KAAKF,IAAL,CAAUS,IAAV,CAAkBR,GAAlB,EAAuBM,IAAvB,EAA6BL,OAA7B,EACJE,GADI,CACA,UAACC,QAAD,EAAc;AACjB,mBAAOA,QAAP;AACD,WAHI,WAIE,UAACC,KAAD,EAAW;AAChB,mBAAO,oEAAiBA,KAAjB,CAAP;AACD,WANI,CAAP;AAOD;AAED;;;;;;;;;;;;;eAUA,aAAOL,GAAP,EAAsD;AAAA,cAAlCM,IAAkC,uEAAtB,IAAsB;AAAA,cAAhBL,OAAgB,uEAAF,EAAE;AACpD,iBAAO,KAAKF,IAAL,CAAUU,GAAV,CAAiBT,GAAjB,EAAsBM,IAAtB,EAA4BL,OAA5B,EACJE,GADI,CACA,UAACC,QAAD,EAAc;AACjB,mBAAOA,QAAP;AACD,WAHI,WAIE,UAACC,KAAD,EAAW;AAChB,mBAAO,oEAAiBA,KAAjB,CAAP;AACD,WANI,CAAP;AAOD;AAED;;;;;;;;;;;;eASA,iBAAUL,GAAV,EAAwC;AAAA,cAAjBU,KAAiB,uEAAJ,IAAI;AACtC,cAAMC,WAAW,GAAG;AAClBJ,mBAAO,EAAE,IAAI,gEAAJ,EADS;AACUD,gBAAI,EAAEI;AADhB,WAApB;AAGA,iBAAO,KAAKX,IAAL,WAAoBC,GAApB,EAAyBW,WAAzB,EACJR,GADI,CACA,UAACC,QAAD,EAAc;AACjB,mBAAOA,QAAP;AACD,WAHI,WAIE,UAACC,KAAD,EAAW;AAChB,mBAAO,oEAAiBA,KAAjB,CAAP;AACD,WANI,CAAP;AAOD;AAED;;;;;;;;;;;;;eAUA,eAASL,GAAT,EAAsBM,IAAtB,EAAoD;AAAA,cAAhBL,OAAgB,uEAAF,EAAE;AAClD,iBAAO,KAAKF,IAAL,CAAUa,KAAV,CAAmBZ,GAAnB,EAAwBM,IAAxB,EAA8BL,OAA9B,EACJE,GADI,CACA,UAACC,QAAD,EAAc;AACjB,mBAAOA,QAAP;AACD,WAHI,WAIE,UAACC,KAAD,EAAW;AAChB,mBAAO,oEAAiBA,KAAjB,CAAP;AACD,WANI,CAAP;AAOD;;;;;;;uBAtHUP,W,EAAW,uH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW;;;;;sEAAXA,W,EAAW;cADvB;AACuB,Q;;;;;;;;;;;;;;;;;;;;;;ACjBxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAOA;;;;;;;;QAOae,a;AAIX;;;;;;AAMA,6BAAoBC,WAApB,EAA8C;AAAA;;AAA1B,aAAAA,WAAA,GAAAA,WAAA;AAEZ,aAAAC,OAAA,GAAU,uBAAV;AAFwC;AAIhD;;;;;;;;;;;;eAQA,gBAAOC,KAAP,EAAkC;AAAA;;AAChC,iBAAOA,KAAK,CACTC,YADI,CACS,GADT,EAEJC,oBAFI,GAGJC,SAHI,CAGM,UAACC,IAAD;AAAA,mBACT,KAAI,CAACC,WAAL,EACE;AACA;AAAEC,yBAAW,EAAE,CAACF,IAAD;AAAf,aAFF,CADS;AAAA,WAHN,CAAP;AASD;AAED;;;;;;;;;;eAOA,qBAAYG,OAAZ,EAAqB;AACnB,iBAAO,KAAKT,WAAL,CAAiBN,IAAjB,CAAsB,KAAKO,OAAL,GAAe,SAArC,EAAgDQ,OAAhD,CAAP;AACD;;;;;;;uBA3CUV,a,EAAa,iH;AAAA,K;;;aAAbA,a;AAAa,eAAbA,aAAa;;;;;sEAAbA,a,EAAa;cADzB;AACyB,Q;;;;;;;;;;;;;;;;;;;;;;ACd1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAEA,QAAMW,MAAM,GAAW,CACtB;AACCC,UAAI,EAAE,EADP;AAECC,kBAAY,EAAE;AAAA,eAAM;AAAA;AAAA;AAAA;AAAA,8CAAuCpC,IAAvC,CAA6C,UAAAqC,CAAC;AAAA,iBAAIA,CAAC,CAACC,YAAN;AAAA,SAA9C,CAAN;AAAA;AAFf,KADsB,CAAvB;;QAWaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBN,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBK,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBN,MAArB,CAAD,CADD;AAER5B,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;ACb7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaoC,Y;AAKX,4BAGSC,GAHT,EAG+B;AAAA;;AAAtB,aAAAA,GAAA,GAAAA,GAAA;AAPT,aAAAC,KAAA,GAAQ,MAAR;AACQ,aAAAC,SAAA,GAAqB,KAArB;AACA,aAAAC,YAAA,GAA6B,IAAI,iDAAJ,EAA7B;AAOP;;;;eAED,iCAAqB;AACpB,eAAKH,GAAL,CAASI,aAAT;AACA;;;aAED,eAAW;AACV,iBAAO,KAAKF,SAAZ;AACA;;;eAED,uBAAW;AACV,eAAKC,YAAL,CAAkBE,WAAlB;AACA;;;;;;;uBAtBUN,Y,EAAY,gI;AAAA,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA;AAAA;ACTvB;;;;;;;;;sEDSWA,Y,EAAY;cANxB,uDAMwB;eANd;AACTO,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAMc,Q;;;;;;;;;;;;;;;;;;;;;;AETzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QA0BaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBANT,CACT,yEADS,EAET,6EAFS,C;AAGV,gBATQ,CACP,uEADO,EAEP,oEAFO,EAGP,4FAHO,EAIP,qEAJO,CASR;;;;0HAGUA,S,EAAS;AAAA,uBAdlB,2DAckB;AAdN,kBAGZ,uEAHY,EAIZ,oEAJY,EAKZ,4FALY,EAMZ,qEANY;AAcM,O;AARF,K;;;;;sEAQPA,S,EAAS;cAhBrB,sDAgBqB;eAhBZ;AACRC,sBAAY,EAAE,CACZ,2DADY,CADN;AAIRZ,iBAAO,EAAE,CACP,uEADO,EAEP,oEAFO,EAGP,4FAHO,EAIP,qEAJO,CAJD;AAURa,mBAAS,EAAE,CACT,yEADS,EAET,6EAFS,CAVH;AAcRC,mBAAS,EAAE,CAAC,2DAAD;AAdH,S;AAgBY,Q;;;;;;;;;;;;;;;;;;AC1BtB;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMC,WAAW,GAAG;AACzBC,gBAAU,EAAE,KADa;AAEzBC,aAAO,EAAE;AAFgB,KAApB;AAKP;;;;;;;AAOA;;;;;;;;;;;;;;;;;AChBA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYD,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBE,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAAC9C,KAAR,CAAc6C,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Injectable } from '@angular/core';\r\n// Statics\r\nimport 'rxjs/add/observable/throw';\r\n// Operators\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\n\r\n/**\r\n * Utils service method that can be used to make all the differet service calls\r\n *\r\n * @export\r\n * @class HttpService\r\n */\r\n@Injectable()\r\nexport class HttpService {\r\n  /**\r\n   * Creates an instance of HttpService.\r\n   *\r\n   * @param {HttpClient} http\r\n   * @memberof HttpService\r\n   */\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * For handling all get requests\r\n   *\r\n   * @template T\r\n   * @param {string} url\r\n   * @param {{}} options\r\n   * @returns {Observable<T>}\r\n   * @memberof HttpService\r\n   */\r\n  get<T>(url: string, options: {} = {}): Observable<T> {\r\n    return this.http.get<T>(url, options)\r\n      .map((response) => {\r\n        return response;\r\n      })\r\n      .catch((error) => {\r\n        return Observable.throw(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * For handling all post requests\r\n   *\r\n   * @template T\r\n   * @param {string} url\r\n   * @param {string} body\r\n   * @param {{}} options\r\n   * @returns {Observable<T>}\r\n   * @memberof HttpService\r\n   */\r\n  post<T>(url: string, body: string = null, options?:object): Observable<T> {\r\n    if (options ==null){\r\n      options = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type':  'application/json',\r\n      })\r\n    };\r\n  }\r\n  else{\r\n    options =options\r\n  }\r\n    return this.http.post<T>(url, body, options)\r\n      .map((response) => {\r\n        return response;\r\n      })\r\n      .catch((error) => {\r\n        return Observable.throw(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * For handling all put requests\r\n   *\r\n   * @template T\r\n   * @param {string} url\r\n   * @param {string} body\r\n   * @param {{}} options\r\n   * @returns {Observable<T>}\r\n   * @memberof HttpService\r\n   */\r\n  put<T>(url: string, body: any = null, options: {} = {}): Observable<T> {\r\n    return this.http.put<T>(url, body, options)\r\n      .map((response) => {\r\n        return response;\r\n      })\r\n      .catch((error) => {\r\n        return Observable.throw(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * For handling all delete requests\r\n   *\r\n   * @template T\r\n   * @param {string} url\r\n   * @param {{}} options\r\n   * @returns {Observable<T>}\r\n   * @memberof HttpService\r\n   */\r\n  delete<T>(url: string, param: any = null): Observable<T> {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders(), body: param\r\n    };\r\n    return this.http.delete<T>(url, httpOptions)\r\n      .map((response) => {\r\n        return response;\r\n      })\r\n      .catch((error) => {\r\n        return Observable.throw(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * For handling all patch requests\r\n   *\r\n   * @template T\r\n   * @param {string} url\r\n   * @param {string} body\r\n   * @param {{}} options\r\n   * @returns {Observable<T>}\r\n   * @memberof HttpService\r\n   */\r\n  patch<T>(url: string, body: string, options: {} = {}): Observable<T> {\r\n    return this.http.patch<T>(url, body, options)\r\n      .map((response) => {\r\n        return response;\r\n      })\r\n      .catch((error) => {\r\n        return Observable.throw(error);\r\n      });\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpService } from \"./http.service\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport \"rxjs/add/operator/debounceTime\";\r\nimport \"rxjs/add/operator/distinctUntilChanged\";\r\nimport \"rxjs/add/operator/switchMap\";\r\n\r\n/**\r\n * Service to manage all api calls to perform search\r\n *\r\n * @export\r\n * @class SearchService\r\n */\r\n@Injectable()\r\nexport class SearchService {\r\n  //private baseurl = environment.apiUrl + ':44053/SearchService';\r\n  private baseurl: string;\r\n\r\n  /**\r\n   * Creates an instance of FileSystemService.\r\n   *\r\n   * @param {HttpService} httpService\r\n   * @memberof FileSystemService\r\n   */\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  private baseUrl = \"http://localhost:5000\";\r\n\r\n  /**\r\n   * Function to form a rxjx based request search term\r\n   *\r\n   * @param {Observable<string>} terms\r\n   * @param {any} params\r\n   * @returns\r\n   * @memberof SearchService\r\n   */\r\n  search(terms: Observable<string>) {\r\n    return terms\r\n      .debounceTime(500)\r\n      .distinctUntilChanged()\r\n      .switchMap((term) =>\r\n        this.searchQuery(\r\n          // Form the request parameter\r\n          { SearchTerms: [term] }\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Api call to search for a keyword or a file\r\n   *\r\n   * @param {any} request\r\n   * @returns\r\n   * @memberof SearchService\r\n   */\r\n  searchQuery(request) {\r\n    return this.httpService.post(this.baseUrl + \"/Search\", request);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nconst routes: Routes = [\r\n\t{\r\n\t\tpath: '',\r\n\t\tloadChildren: () => import('src/app/Search/search.module').then (m => m.SearchModule)\r\n\t},\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnDestroy, AfterContentChecked, ChangeDetectorRef } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\n\r\nexport class AppComponent implements OnDestroy, AfterContentChecked{\r\n  title = 'base';\r\n  private isLoading: boolean = false;\r\n  private subscription: Subscription = new Subscription();\r\n\r\n  constructor(\r\n\r\n\r\n  \tprivate ref: ChangeDetectorRef\r\n  ) {\r\n  }\r\n\r\n  ngAfterContentChecked(){\r\n  \tthis.ref.detectChanges();\r\n  }\r\n\r\n  get loading():boolean {\r\n  \treturn this.isLoading;\r\n  }\r\n\r\n  ngOnDestroy(){\r\n  \tthis.subscription.unsubscribe();\r\n  }\r\n\r\n}\r\n","  <router-outlet></router-outlet>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpService } from './Search/Services/http.service';\r\nimport { SearchService } from './Search/Services/search.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule \r\n  ],\r\n  providers: [\r\n    HttpService,\r\n    SearchService\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  API_URL: 'https://reqres.in/api/'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}